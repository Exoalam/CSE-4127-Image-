# -*- coding: utf-8 -*-
'''
# doc generated by chatgpt
the given code is a Python script that creates an image using numpy and matplotlib and allows the user to click on the image to print the x and y coordinates of the click. Here is a line by line breakdown of the code along with comments:
    
The numpy module is used to create a 2D array img of zeros with a shape of (10, 12) and of type np.uint8. A portion of the array is then set to ones by selecting a slice of the array with indices 2:8 along the first axis and 3:9 along the second axis.

The matplotlib module is used to display the image. The imshow function is used to display the image in a plot. The plot is stored in the variable im.

The mpl_connect method is used to connect the onclick function to the plot. This means that when the user clicks on the plot, the onclick function will be called.

Finally, the show function is called to display the plot. The block parameter is set to True, which means that the script will block until the plot window is closed.

After the plot is closed, the x and y coordinates of the last click are printed using the print function. Note that x and y are defined inside the onclick function as global variables so that they can be accessed outside the function.
'''

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('TkAgg')

point_list=[]

img = np.zeros((10,12), np.uint8)
img[4:6, 5:7] = 1
# click and seed point set up
x = None
y = None

# The mouse coordinate system and the Matplotlib coordinate system are different, handle that
def onclick(event):
    global x, y
    ax = event.inaxes
    if ax is not None:
        x, y = ax.transData.inverted().transform([event.x, event.y])
        x = int(round(x))
        y = int(round(y))
        print('button=%d, x=%d, y=%d, xdata=%f, ydata=%f' %
              (event.button, event.x, event.y, x, y))
        point_list.append((x,y))


X = np.zeros_like(img)
plt.title("Please select seed pixel from the input")
im = plt.imshow(img, cmap='gray')
im.figure.canvas.mpl_connect('button_press_event', onclick)
plt.show(block=True)

print(point_list)
'''
# difference in the order of indices between OpenCV and Matplotlib. In OpenCV, the first index is the row number, while in Matplotlib, the first index is the column number.
X[y,x] = 1
print(f"seed pos = {x}, {y}")
X1 = X

figure, axis = plt.subplots(1,2, figsize=(20, 6))
axis[0].imshow(img, cmap='gray')
axis[0].set_title("Input Image")
axis[1].imshow(X, cmap='gray')
axis[1].set_title("seed point location" )
plt.show(block=True)
'''